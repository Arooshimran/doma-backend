// src/app/api/customer/login/route.ts
import { type NextRequest, NextResponse } from "next/server"
import { getPayloadClient } from "@/lib/payload-client"

// CORS headers helper
const getCorsHeaders = () => ({
  "Access-Control-Allow-Origin": "http://localhost:3001", // Adjust as needed
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
  "Access-Control-Allow-Credentials": "true",
})

// Handle preflight OPTIONS request
export async function OPTIONS() {
  console.log("ðŸ“‹ Handling OPTIONS preflight request for customer login")
  return new NextResponse(null, {
    status: 204,
    headers: getCorsHeaders(),
  })
}

// POST - Customer Login
export async function POST(request: NextRequest) {
  try {
    console.log("ðŸš€ POST /api/customer/login - Starting...")
    
    const body = await request.json()
    const { email, password } = body

    console.log("ðŸ“‹ Login attempt for email:", email)

    if (!email || !password) {
      return NextResponse.json(
        { error: "Email and password are required" },
        { 
          status: 400,
          headers: getCorsHeaders()
        }
      )
    }

    const payload = await getPayloadClient()
    
    // Use Payload's built-in login method for customers collection
    const loginResult = await payload.login({
      collection: "customers", // Your customers collection slug
      data: {
        email,
        password,
      },
    })

    console.log("âœ… Customer login successful:", loginResult.user.email)

    // Return success with user data and token
    return NextResponse.json(
      {
        success: true,
        message: "Login successful",
        token: loginResult.token, // JWT token generated by Payload
        user: {
          id: loginResult.user.id,
          email: loginResult.user.email,
          firstName: loginResult.user.firstName,
          lastName: loginResult.user.lastName,
          // Add any other customer fields you want to return
        }
      },
      {
        headers: getCorsHeaders()
      }
    )
    
  } catch (error) {
    console.error("ðŸ’¥ Customer login error:", error)
    
    // Handle specific Payload errors
    if (error instanceof Error) {
      if (error.message.includes("Invalid login credentials")) {
        return NextResponse.json(
          { error: "Invalid email or password" },
          { 
            status: 401,
            headers: getCorsHeaders()
          }
        )
      }
    }
    
    return NextResponse.json(
      { 
        error: "Login failed",
        details: error instanceof Error ? error.message : "Unknown error"
      },
      { 
        status: 500,
        headers: getCorsHeaders()
      }
    )
  }
}