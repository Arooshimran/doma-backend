// src/app/api/customer/register/route.ts
import { type NextRequest, NextResponse } from "next/server"
import { getPayloadClient } from "@/lib/payload-client"

// CORS headers helper
const getCorsHeaders = () => ({
  "Access-Control-Allow-Origin": "http://localhost:3001", // Adjust as needed
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
  "Access-Control-Allow-Credentials": "true",
})

// Handle preflight OPTIONS request
export async function OPTIONS() {
  console.log("ðŸ“‹ Handling OPTIONS preflight request for customer register")
  return new NextResponse(null, {
    status: 204,
    headers: getCorsHeaders(),
  })
}

// POST - Customer Registration
export async function POST(request: NextRequest) {
  try {
    console.log("ðŸš€ POST /api/customer/register - Starting...")
    
    const body = await request.json()
    const { email, password, firstName, lastName, phone } = body

    console.log("ðŸ“‹ Registration attempt for email:", email)

    // Validation
    if (!email || !password || !firstName || !lastName) {
      return NextResponse.json(
        { error: "Email, password, first name, and last name are required" },
        { 
          status: 400,
          headers: getCorsHeaders()
        }
      )
    }

    // Basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: "Please provide a valid email address" },
        { 
          status: 400,
          headers: getCorsHeaders()
        }
      )
    }

    // Password validation (adjust as needed)
    if (password.length < 6) {
      return NextResponse.json(
        { error: "Password must be at least 6 characters long" },
        { 
          status: 400,
          headers: getCorsHeaders()
        }
      )
    }

    const payload = await getPayloadClient()
    
    // Check if customer already exists
    const existingCustomers = await payload.find({
      collection: "customers",
      where: {
        email: {
          equals: email,
        },
      },
    })

    if (existingCustomers.docs.length > 0) {
      return NextResponse.json(
        { error: "A customer with this email already exists" },
        { 
          status: 409,
          headers: getCorsHeaders()
        }
      )
    }

    // Create new customer
    const newCustomer = await payload.create({
      collection: "customers",
      data: {
        email,
        password,
        firstName,
        lastName,
        phone,
        role: "customer", // If you have roles
        // Add any other default fields for customers
      },
    })

    console.log("âœ… Customer created successfully:", newCustomer.email)

    // Automatically log in the new customer
    const loginResult = await payload.login({
      collection: "customers",
      data: {
        email,
        password,
      },
    })

    console.log("âœ… Auto-login successful for new customer")

    // Return success with user data and token
    return NextResponse.json(
      {
        success: true,
        message: "Registration successful",
        token: loginResult.token, // JWT token generated by Payload
        user: {
          id: newCustomer.id,
          email: newCustomer.email,
          firstName: newCustomer.firstName,
          lastName: newCustomer.lastName,
          phone: newCustomer.phone,
        }
      },
      {
        status: 201,
        headers: getCorsHeaders()
      }
    )
    
  } catch (error) {
    console.error("ðŸ’¥ Customer registration error:", error)
    
    return NextResponse.json(
      { 
        error: "Registration failed",
        details: error instanceof Error ? error.message : "Unknown error"
      },
      { 
        status: 500,
        headers: getCorsHeaders()
      }
    )
  }
}